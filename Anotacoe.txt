DJANGO - ALURA

01 . iniciando aplicacao e subindo o servidor
    Django é um framework escrito em Python.
    Foca no desenvolvimento do projeto.

    Ele é orientado para o conteúdo.

    CRUD - Criar, editar, deletar

    Sintaxe - Escolhemos o Django pois ele tem uma sintaxe simples nativa
    ORM - nao precisa ficar escrevendo o código na mao do banco de dados
    Tem uma interface de administrador
    Segurança 
    Arquitetura - MVC chamada de MVT. 
    Uma comunidade ativa - As pessoas contribuem muito para que a linguagem seja usada.
    Estrutura completa

    Uma boa prática é sempre que instalar algum pip ver quais sao os arquivos necessários e criar um requirements.txt.

    Entao apos fazer o pip install ( nome arquivo instalado )
    Colocar pip freeze
    Depois pip freeze > requirements.txt

    Assim ficará salvo todos os arquivos do programa.

    Para criar o arquivo django, voce coloca no terminal: django-admin startproject (e o nome do arquivo) . ->> esse ponto no final faz com que crie a pasta direto onde vc esta. Se nao colocar, ele cria duas pastas.
    Uma boa pratica é colocar o nome do arquivo como config ou setup. Pois é onde terá todas as configurações do seu projeto.

    O arquivo manage.py sera o responsavel por rodar todos os arquivos do django.

    venv: 
        É o ambiente virtual “padrão” do Python e sua grande vantagem é já vir instalado como um módulo na linguagem a partir da versão 3.3. Se trata de um subset (parte menor) da ferramenta virtualenv.

    Virtualenv: 
        É uma ferramenta feita especificamente para a criação de ambientes virtuais e precede a criação da venv, sendo um superset (parte maior) dela. Algumas de sua principais vantagens sobre a venv são:
        • Maior velocidade, graças ao método app-data seed;
        • Pode criar ambientes virtuais para versões arbitrárias do Python instaladas na máquina;
        • Pode ser atualizado utilizando a ferramenta pip;
        • Possui uma Programmatic API, capaz de descrever um ambiente virtual sem criá-lo.

    Conda: 
        É uma alternativa não apenas às ferramentas de ambiente virtuais já citadas, mas ao instalador de pacotes pip também. Possui um escopo mais centrado na área de ciência de dados e possui a capacidade de instalar pacotes fora do ecossistema do Python.

    Virtualenvwrapper: 
        É uma extensão do projeto Virtualenv que torna a criação, deleção e gerenciamento geral dos ambientes virtuais mais fácil. Uma grande vantagem de sua utilização é a organização de todos os ambientes virtuais utilizados em um só lugar, além de facilitar os comandos de CLI.

    Poetry: 
        É uma ferramenta para gerenciamento de dependências e pacotes do Python. Através do Poetry é possível declarar quais pacotes um projeto necessita para funcionar, de forma parecida ao requirements.txt, porém, de forma determinística.

    Configurando o ambiente de desenvolvimento:

    Confira o andamento do seu projeto de acordo com o que foi instruído:

    1- Estabeleça um ambiente virtual dentro do diretório do projeto

        Linux/MacOS:

        virtualenv -p python3 venv

    2- Ative o ambiente virtual

        Linux/MacOS:

        source venv/bin/activate

    3- Instale o Django 

        pip install django==4.1
    4- Crie o projeto Django (aqui ele cria uma pasta setup com varios arquivos. Por isso colcoa o ponto no final, para criar dentrod a pasta do projeto. se nao ele cria uma pasta setup e dentro outra pasta setup com as coisas.)

        django-admin startproject setup .

    5- Rode o servidor. Sempre que for rodar o projeto no servidor colocar:

        python manage.py runserver
    
    6- Para sair do servidor:

        control + c
        

02 . configurações, git e gitHub

    Idima - time zone

03 . Deixando o arquivo mais seguro:
    1-  Crie um novo arquivo chamado .env no diretório raiz da aplicação para armazenar a SECRET_KEY (para criar o arquivo, mkdir e o nome da pasta. Certifique-se que vc esta dentro da pasta que quer criar o arquivo)

    Conteúdo do arquivo .env:

    SECRET_KEY=<chave aleatória>

    2- Instale o pacote python-dotenv

    pip install python-load_dotenv

    3- Importe os pacotes 'python-dotenv' e 'os' no arquivo settings.py

    from pathlib import os
    from dotenv import load_dotenv

    4- Importe a SECRET_KEY do arquivo .env e coloque dentro da variável SECRET_KEY no arquivo settings.py

    load_dotenv()
    SECRET_KEY = str(os.getenv('SECRET_KEY'))

    5- Gere um arquivo .gitignore no diretório raiz do projeto e inclua o arquivo .env como conteúdo.

    Conteúdo do .gitignore:

    .env

    Pronto! Assim deixamos o projeto mais seguro, impedindo que dados sensíveis fiquem à mercê de commits descuidados.

04 . Projeto, app e views
    
    Quando falamos das funcionalidades da nossa aplicação, estamos trabalhando com apps. 
    Aqui criamos um app dentro do nosso projeto. 
    No caso é o app 'galeria'. Seu objetivo sera manter todo o código relacionado as imagens e fotos do nosso programa.

    comando no terminal:

    python manage.py startapp galeria

    Apos isso precisamos falar que esse app faz parte do nosso projeto. Entao vamos em setup > settings.py e vamos ate a parte que diz: **INSTALLED_APPS** e adicionamos no final:

    'galeria',

    Pronto, ja instalamos nosso app, mas agora precisamos inserir as informações que queremos. Para isso, acessamos galeria > views.py (é o arquivo responsavel por exibir as informacoes na tela).
    Para isso importamos o código:

    from django.http import HttpResponse

    Depois criamos um def com a função index, que sera reponsavel pela pagina principal. Passamos o parametro request, para que sejamos capaz de responder as requisições.
    Abaixo disso, vamos configurar o módulo HttpResponse como retorno, passando dentro dele '<h1>Alura Space</h1>':
    O arquivo estara assim:

    from django.shortcuts import render
    from django.http import HttpResponse

    def index(request):
        return HttpResponse('<h1>Alura Space</h1>')

    Como esse index que criamos diz respeito ao app galeria, criamos dentro dela um arquivo chamado urls.py e colocamos:
    
    from django.urls import path
    from galeria.views import index #aqui importamos as informacoes que colocamos na funcao index.

    urlpatterns = [
        path('', index)
    ]

    Obs.: Uma boa pratica é criar essa lista com esse nome urlpatterns. Nele sera colocado todos os urls da galeria.

    No arquivo urls.py do projeto, colocamos:

    from django.contrib import admin
    from django.urls import path, include


    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include('galeria.urls'))
    ]

    Obs.: o metodo include estamos incluindo tudo o que esta na pasta urls dentro do app galeria.

05 . TEMPLATES
    Para renderizar seus arquivos html dentro do django, você vai na pasta setup > settings.py na parte que esta TEMPLATES.
    A DIRS é local onde esta o html.
    Criamos uma pasta chamada templates no nosso projeto e para adicionar na DIRS colocamos os.path.join(BASE_DIR, 'templates')

    Obs.: quando você colocar BASE_DIR, você esta dizendo que é a pasta raiz. Esta na base do seu diretorio. Logo apos coloca a pasta que precisa achar na base, no caso, templates.

    Apos fazer isso precisamos falar pra views renderizar a pagina.
    Para isso vamos na pasta views, apagamos o import do HttpResponse, pois nao vamos mais usa-lo. (ele servia para renderizar oq colocavamos entre as aspas.)
    E vamos usar o import do django que é o render.
    entao ele vai retornar o que esta dentro do parametro do index e o nome do arquivo:

    def index(request): 
        return render(request, 'index.html')

06 . Arquivos estáticos

    Precisamos colocar informar onde estarao nossos arquivos estáticos igual fizemos com nosso código html em template.
    Entao vamos criar um diretorio.
    Colocamos:

    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'setup/static')
    ]

    Obs.: no staticfiles_dirs ele vai indicar onde estao os arquivos. 
    Porem ele precisa manipular esses dados e implementar. Para isso criamos o static_root

    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

    Agora precisamos indicar para o django que ele deve pegar os arquivos staticos e implementar.
    Para isso damos o comando no terminal:
    
    python manage.py collectstatic

    Para fazer a magica aparecer, preciso colocar no inicio do meu html:
    
    {% load static %}
    
    Depois no href do nosso style, embedamos um codigo pyhton. Assim: (embedado é quando anexamos um codigo python no html)

    <link rel="stylesheet" href="{% static '/styles/style.css'%}">

    Pronto, agora precisamos adicionar as imagens.

07. Importando as imagens
    Para isso precisamos colocar o codigo python nas imagens do html. Assim:
    Ex.:
    <img src="{% static '/assets/logo/Logo(2).png' %}" alt="Logo da Alura Space" />


08 . DRY - Nao repita código.

    Ver material Alura.
    Fala sobre o {% extends 'caminho do arquivo base' %} >> precisa colocar no inicio da pagina
    O partials {% include 'caminho arquivo' %} >> sao as partes do template. Assim qndo alterar algo, ja muda em todas as paginas.